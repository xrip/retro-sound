#include <cstdio>
#include <pio_spi.h>

#include "pico/stdlib.h"
#include "hardware/spi.h"
#include "hardware/gpio.h"
#define CODE_SIZE 1020
const unsigned char atab[1020] = { /* Register addresses */
    0x7, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6,
    0x6, 0x7, 0x6, 0x6, 0x6, 0x6, 0x7, 0x6, 0x6, 0x7, 0x6, 0x6
};
const unsigned short dtab[1020] = { /* Data to write */
    0x8050, 0x2800, 0x8080, 0x0006, 0x2016, 0xf400, 0x4095, 0x0006,
    0x0017, 0x3009, 0x1c40, 0x3009, 0x1fc2, 0x6020, 0x0024, 0x0000,
    0x1fc2, 0x2000, 0x0000, 0xb020, 0x4542, 0x3613, 0x0024, 0x0006,
    0x0057, 0x3e15, 0x1c15, 0x0020, 0x1fd4, 0x3580, 0x3802, 0xf204,
    0x3804, 0x0fff, 0xfe44, 0xa244, 0x1804, 0xf400, 0x4094, 0x2800,
    0x1985, 0x3009, 0x1bc2, 0xf400, 0x4500, 0x2000, 0x0000, 0x36f5,
    0x3c15, 0x3009, 0x3857, 0x2800, 0x1b40, 0x0030, 0x0457, 0x3009,
    0x3857, 0x0030, 0x0a57, 0x3e14, 0xf806, 0x3701, 0x8024, 0x0006,
    0x0017, 0x3e04, 0x9c13, 0x0020, 0x1fd2, 0x3b81, 0x8024, 0x36f4,
    0xbc13, 0x36f4, 0xd806, 0x0030, 0x0717, 0x2100, 0x0000, 0x3f05,
    0xdbd7, 0x0030, 0xf80f, 0x0000, 0x1f0e, 0x2800, 0x7680, 0x0000,
    0x004d, 0xf400, 0x4595, 0x3e00, 0x17cc, 0x3505, 0xf802, 0x3773,
    0x0024, 0x3763, 0x0024, 0x3700, 0x0024, 0x0000, 0x09c2, 0x6024,
    0x0024, 0x3600, 0x1802, 0x2830, 0xf855, 0x0000, 0x004d, 0x2800,
    0x2240, 0x36f3, 0x0024, 0x3613, 0x0024, 0x3e12, 0xb817, 0x3e12,
    0x3815, 0x3e05, 0xb814, 0x3625, 0x0024, 0x0000, 0x800a, 0x3e10,
    0x3801, 0x3e10, 0xb803, 0x3e11, 0x3810, 0x3e04, 0x7812, 0x34c3,
    0x0024, 0x3440, 0x0024, 0x4080, 0x0024, 0x001b, 0x3301, 0x2800,
    0x2c85, 0x0000, 0x0180, 0x0000, 0x0551, 0x0000, 0xaf02, 0x293c,
    0x1f40, 0x0007, 0xffc1, 0xb010, 0x134c, 0x0018, 0x0001, 0x4010,
    0x10d0, 0x0007, 0xffc1, 0xfe20, 0x020c, 0x0000, 0x0591, 0x48b6,
    0x0024, 0x4dd6, 0x0024, 0x0001, 0x2202, 0x293c, 0x1f40, 0x4380,
    0x2003, 0xb010, 0x134c, 0x0018, 0x0001, 0x4010, 0x1010, 0xfe20,
    0x020c, 0x48b6, 0x844c, 0x4dd6, 0x0024, 0xb880, 0x2003, 0x3434,
    0x0024, 0x2800, 0x5280, 0x3083, 0x0024, 0x001c, 0xccc2, 0x0000,
    0x05d1, 0x34d3, 0x0024, 0x3404, 0x0024, 0x3404, 0x420c, 0x3001,
    0x05cc, 0xa408, 0x044c, 0x3100, 0x0024, 0x6010, 0x0024, 0xfe20,
    0x0024, 0x48b6, 0x0024, 0x4dd6, 0x0024, 0x4310, 0x0024, 0x4488,
    0x2400, 0x0000, 0x0551, 0x2800, 0x3295, 0x3404, 0x0024, 0xf290,
    0x00cc, 0x3800, 0x0024, 0x3434, 0x0024, 0x3073, 0x0024, 0x3013,
    0x0024, 0x2800, 0x4340, 0x3800, 0x0024, 0x3083, 0x0024, 0x3000,
    0x0024, 0x6402, 0x0024, 0x0000, 0x1001, 0x2800, 0x3618, 0x0018,
    0x0002, 0x3434, 0x4024, 0x3133, 0x0024, 0x3100, 0x0024, 0xfe20,
    0x0024, 0x48b6, 0x0024, 0x4dd6, 0x0024, 0x2800, 0x4340, 0x3900,
    0xc024, 0x4010, 0x1011, 0x6402, 0x0024, 0x0000, 0x0590, 0x2800,
    0x3918, 0x0000, 0x0024, 0xf290, 0x04cc, 0x3900, 0x0024, 0x3434,
    0x0024, 0x3073, 0x0024, 0x3013, 0x0024, 0x2800, 0x4340, 0x3800,
    0x0024, 0x3183, 0x0024, 0x3100, 0x0024, 0x6402, 0x0024, 0x0000,
    0x1001, 0x2800, 0x3c98, 0x0019, 0x9982, 0x3434, 0x0024, 0x3033,
    0x0024, 0x3000, 0x0024, 0xfe20, 0x0024, 0x48b6, 0x0024, 0x4dd6,
    0x0024, 0x2800, 0x4340, 0x3800, 0xc024, 0x4010, 0x0024, 0x6402,
    0x0024, 0x001d, 0x7082, 0x2800, 0x4198, 0x0000, 0x0024, 0xf290,
    0x1010, 0x3033, 0x0024, 0x3800, 0x0024, 0x3404, 0x0024, 0x3073,
    0x0024, 0x3013, 0x0024, 0x3800, 0x0024, 0x0004, 0x4d50, 0x3010,
    0x0024, 0x30f0, 0x4024, 0x3434, 0x4024, 0x3143, 0x0024, 0x3910,
    0x0024, 0x2800, 0x4340, 0x39f0, 0x4024, 0x3434, 0x0024, 0x3033,
    0x0024, 0x3000, 0x0024, 0xfe20, 0x0024, 0x48b6, 0x0024, 0x4dd6,
    0x0024, 0x3800, 0xc024, 0x001e, 0x9982, 0x0001, 0x1012, 0x0000,
    0x0381, 0x34d3, 0x184c, 0x3444, 0x0024, 0x3073, 0x0024, 0x3013,
    0x0024, 0x3000, 0x0024, 0xfe20, 0x0024, 0x48b6, 0x0024, 0x4dd6,
    0x0024, 0x4380, 0x3003, 0x3400, 0x0024, 0x293d, 0x2900, 0x3e00,
    0x0024, 0x3009, 0x33c0, 0x293b, 0xc540, 0x0010, 0x0004, 0x34d3,
    0x184c, 0x3444, 0x0024, 0x3073, 0x13c0, 0x3073, 0x0024, 0x293b,
    0xf880, 0x0001, 0x1011, 0x0001, 0x0010, 0x0001, 0x1011, 0x34d3,
    0x184c, 0x3430, 0x0024, 0x4010, 0x0024, 0x0000, 0x05c1, 0x3e10,
    0x0024, 0x293b, 0xac80, 0x0006, 0x0092, 0x0000, 0x05d1, 0x36f3,
    0x134c, 0x3404, 0x0024, 0x3083, 0x0024, 0x3000, 0x0024, 0x6012,
    0x0024, 0x0013, 0x3304, 0x2800, 0x5198, 0x0001, 0xc682, 0x0000,
    0x0500, 0x0001, 0x0012, 0x3404, 0x584c, 0x3133, 0x0024, 0x3100,
    0x4024, 0x0000, 0x05d1, 0xfe22, 0x0024, 0x48b6, 0x0024, 0x4dd6,
    0x0024, 0x3e10, 0xc024, 0x3430, 0x8024, 0x4204, 0x0024, 0x293b,
    0xb580, 0x3e00, 0x8024, 0x36e3, 0x134c, 0x3434, 0x0024, 0x3083,
    0x0024, 0x3000, 0x0024, 0x6090, 0x0024, 0x3800, 0x1812, 0x36f4,
    0x4024, 0x36f1, 0x1810, 0x36f0, 0x9803, 0x36f0, 0x1801, 0x3405,
    0x9014, 0x36f3, 0x0024, 0x36f2, 0x1815, 0x2000, 0x0000, 0x36f2,
    0x9817, 0x3613, 0x0024, 0x3e12, 0xb817, 0x3e12, 0x3815, 0x3e05,
    0xb814, 0x3615, 0x0024, 0x0000, 0x800a, 0x3e10, 0x3801, 0x3e10,
    0xb804, 0x3e01, 0x7810, 0x0008, 0x04d0, 0x2900, 0x1480, 0x3001,
    0x0024, 0x4080, 0x03cc, 0x3000, 0x0024, 0x2800, 0x7485, 0x4090,
    0x0024, 0x0000, 0x0024, 0x2800, 0x6245, 0x0000, 0x0024, 0x0000,
    0x0081, 0x3000, 0x0024, 0x6012, 0x0024, 0x0000, 0x0401, 0x2800,
    0x70c5, 0x0000, 0x0024, 0x6012, 0x0024, 0x0000, 0x0024, 0x2800,
    0x6645, 0x0000, 0x0024, 0x2900, 0x1680, 0x0000, 0x0024, 0x4088,
    0x008c, 0x0000, 0x2000, 0x6400, 0x0024, 0x0000, 0x3c00, 0x2800,
    0x5ed8, 0x0000, 0x0024, 0x2800, 0x6300, 0x3801, 0x0024, 0x6400,
    0x038c, 0x0000, 0x0024, 0x2800, 0x6318, 0x0000, 0x0024, 0x3013,
    0x0024, 0x2900, 0x1480, 0x3801, 0x0024, 0x4080, 0x0024, 0x0000,
    0x0024, 0x2800, 0x6255, 0x0000, 0x0024, 0x6890, 0x03cc, 0x2800,
    0x7480, 0x3800, 0x0024, 0x2900, 0x1680, 0x0008, 0x0510, 0x3800,
    0x0024, 0x0000, 0x3c00, 0x6400, 0x0024, 0x003f, 0xff00, 0x2800,
    0x6b08, 0x0000, 0x0024, 0x0000, 0x3fc0, 0x6400, 0x0024, 0x0000,
    0x3c00, 0x2800, 0x73c5, 0x6400, 0x0024, 0x0000, 0x0024, 0x2800,
    0x73d5, 0x0000, 0x0024, 0xb880, 0x184c, 0x2900, 0x1480, 0x3009,
    0x3800, 0x4082, 0x9bc0, 0x6014, 0x0024, 0x0000, 0x3c04, 0x2800,
    0x6941, 0x0000, 0x3dc1, 0x2900, 0x1680, 0x0000, 0x0024, 0xf400,
    0x4004, 0x0000, 0x3dc1, 0x6412, 0x0024, 0x0008, 0x0490, 0x2800,
    0x6a85, 0x0000, 0x0000, 0x0000, 0x0400, 0x2800, 0x7480, 0x3800,
    0x0024, 0x0008, 0x04d0, 0x3001, 0x4024, 0xa50a, 0x0024, 0x0000,
    0x03c0, 0xb50a, 0x0024, 0x0000, 0x0300, 0x6500, 0x0024, 0x0000,
    0x0024, 0x2900, 0x1488, 0x0000, 0x6f48, 0x0000, 0x0380, 0x6500,
    0x0024, 0x0000, 0x0024, 0x2800, 0x7195, 0x0000, 0x0024, 0x2900,
    0x1480, 0x0000, 0x0024, 0x4080, 0x03cc, 0x0000, 0x0080, 0x2800,
    0x70d5, 0x0000, 0x0024, 0x2800, 0x7480, 0x3800, 0x0024, 0x2900,
    0x1680, 0x0000, 0x0024, 0x408a, 0x0024, 0x0008, 0x0510, 0x3613,
    0x0024, 0x3e11, 0x4024, 0x30f0, 0x0024, 0x3e10, 0x0024, 0x3000,
    0x4024, 0x2931, 0xe080, 0x3e00, 0x4024, 0x36d3, 0x0024, 0x0000,
    0x0000, 0x0008, 0x0490, 0x3800, 0x0024, 0x36f1, 0x5810, 0x36f0,
    0x9804, 0x36f0, 0x1801, 0x3405, 0x9014, 0x36f3, 0x0024, 0x36f2,
    0x1815, 0x2000, 0x0000, 0x36f2, 0x9817, 0x0005, 0xbe51, 0x0001,
    0x0010, 0x3613, 0x0024, 0x3e05, 0xb814, 0x3635, 0x0024, 0x0000,
    0x800a, 0xb880, 0x104c, 0xb882, 0x33c0, 0x2914, 0xbec0, 0x0004,
    0xc580, 0x0019, 0x98c0, 0x0004, 0x4e90, 0x3800, 0x0024, 0x001f,
    0xff00, 0x2931, 0x6c40, 0x3900, 0x0024, 0x2931, 0x6640, 0x0000,
    0x0024, 0x2900, 0x5500, 0x0000, 0x8001, 0x2912, 0x0d00, 0x3613,
    0x0024, 0x6012, 0x0024, 0x0000, 0x8005, 0x2800, 0x7b18, 0x0004,
    0x4d50, 0x2912, 0x0d00, 0x3613, 0x108c, 0x2934, 0x4180, 0x3ce0,
    0x0024, 0x0000, 0x1000, 0x3423, 0x0024, 0x2900, 0x0a80, 0x34e1,
    0x0024, 0xb882, 0x0042, 0x30f0, 0xc024, 0x4dc2, 0x0024, 0x3810,
    0x0024, 0x2800, 0x7b00, 0x38f0, 0x4024, 0x3e12, 0xb817, 0x3e12,
    0x3815, 0x3e05, 0xb814, 0x3615, 0x0024, 0x0000, 0x800a, 0x3e10,
    0x3801, 0x0000, 0x0081, 0xb880, 0xb811, 0x0030, 0x0291, 0x3e14,
    0x0024, 0x0030, 0x0690, 0x3e14, 0xb813, 0x0030, 0x00d3, 0x0007,
    0x9252, 0x3800, 0x0024, 0x3910, 0x0024, 0x3a00, 0x0024, 0x0000,
    0xc0c0, 0x3900, 0x0024, 0x0030, 0x0000, 0x0006, 0x0051, 0x2908,
    0x6400, 0x3b00, 0x0024, 0xb880, 0x008c, 0x3800, 0x0024, 0x3800,
    0x0024, 0x0003, 0x0d40, 0x0006, 0xc490, 0x2908, 0x7f80, 0x3009,
    0x2000, 0x0030, 0x0ad0, 0x3800, 0x184c, 0x002b, 0x1100, 0x3e10,
    0x0024, 0x2909, 0xa9c0, 0x3e10, 0x4024, 0x000a, 0x8001, 0x2908,
    0x7f80, 0x36e3, 0x0024, 0xb880, 0x2000, 0x0006, 0x0010, 0x3009,
    0x2410, 0x0006, 0x0011, 0x3009, 0x2410, 0x0008, 0x0490, 0x3810,
    0x0024, 0x3800, 0x0024, 0x0000, 0x0890, 0x290f, 0xfcc0, 0x0006,
    0x8380, 0x000a, 0x8001, 0x0000, 0x0950, 0x290f, 0xfcc0, 0x0006,
    0xb380, 0x0000, 0x09c0, 0x0030, 0x0690, 0x6890, 0x2000, 0x0030,
    0x1310, 0x6890, 0x2000, 0x0030, 0x0490, 0x2900, 0x1e00, 0x3800,
    0x0024, 0x36f4, 0x9813, 0x36f4, 0x1811, 0x36f0, 0x1801, 0x3405,
    0x9014, 0x36f3, 0x0024, 0x36f2, 0x1815, 0x2000, 0x0000, 0x36f2,
    0x9817, 0x5800, 0x1800, 0x1800, 0x98cc, 0x7395, 0x8025, 0x2a00,
    0x1ace, 0x8022, 0x2a00, 0x1a0e
};

/* User application code loading tables for VS10xx */




// Define the GPIO pins
#define VS_MISO 29
#define VS_MOSI 28
#define VS_SCK 27
#define VS_DREQ 26    // Data request pin
#define VS_XCS 22      // Control select pin
#define VS_XDCS 21     // Data select pin

#define VS_RESET  20     // Reset, active low

#define MIDI_LED  25    // Optional LED for MIDI activity indication

/* SCI registers */

#define SCI_MODE        0x00
#define SCI_STATUS      0x01
#define SCI_BASS        0x02
#define SCI_CLOCKF      0x03
#define SCI_DECODE_TIME 0x04
#define SCI_AUDATA      0x05
#define SCI_WRAM        0x06
#define SCI_WRAMADDR    0x07
#define SCI_HDAT0       0x08 /* VS1063, VS1053, VS1033, VS1003, VS1011 */
#define SCI_IN0         0x08 /* VS1103 */
#define SCI_HDAT1       0x09 /* VS1063, VS1053, VS1033, VS1003, VS1011 */
#define SCI_IN1         0x09 /* VS1103 */
#define SCI_AIADDR      0x0A
#define SCI_VOL         0x0B
#define SCI_AICTRL0     0x0C /* VS1063, VS1053, VS1033, VS1003, VS1011 */
#define SCI_MIXERVOL    0x0C /* VS1103 */
#define SCI_AICTRL1     0x0D /* VS1063, VS1053, VS1033, VS1003, VS1011 */
#define SCI_ADPCMRECCTL 0x0D /* VS1103 */
#define SCI_AICTRL2     0x0E
// VS1003 Register definitions

#define SPI_MODE        0x0   // Mode control
#define SPI_STATUS      0x1   // Status of VS1003
#define SPI_BASS        0x2   // Built-in bass/treble enhancer
#define SPI_CLOCKF      0x3   // Clock freq + multiplier
#define SPI_DECODE_TIME 0x4   // Decode time in seconds
#define SPI_AUDATA      0x5   // Misc. audio data
#define SPI_WRAM        0x6   // RAM write/read
#define SPI_WRAMADDR    0x7   // Base address for RAM write/read
#define SPI_HDAT0       0x8   // Stream header data 0
#define SPI_HDAT1       0x9   // Stream header data 1
#define SPI_AIADDR      0xA   // Start address of application
#define SPI_VOL         0xB   // Volume control
#define SPI_AICTRL0     0xC   // Application control register 0
#define SPI_AICTRL1     0xD   // Application control register 0
#define SPI_AICTRL2     0xE   // Application control register 0
#define SPI_AICTRL3     0xF   // Application control register 0

#define SM_DIFF         0x01    // Differential
#define SM_JUMP         0x02    // Set to zero
#define SM_RESET        0x04    // Soft reset
#define SM_OUTOFWAV     0x08    // Jump out of WAV decoding
#define SM_PDOWN        0x10    // Powerdown
#define SM_TESTS        0x20    // Allow SDI tests
#define SM_STREAM       0x40    // Stream mode
#define SM_SETTOZERO2   0x80    // Set to zero?
#define SM_DACT         0x100   // DCLK active edge
#define SM_SDIORD       0x200   // SDI bit order
#define SM_SDISHARE     0x400   // Share SPI chip select
#define SM_SDINEW       0x800   // VS1002 native SPI modes
#define SM_ADPCM        0x1000  // ADPCM recording active
#define SM_ADPCM_HP     0x2000  // ADPCM high-pass filter active
#define SM_LINE_IN      0x4000  // ADPCM recording selector

#define SC_MULT0X       0x0000 // XTALI
#define SC_MULT1_5X     0x2000 // XTALI x 1:5
#define SC_MULT2_0X     0x4000 // XTALI x 2:0
#define SC_MULT2_5X     0x6000 // XTALI x 2:5
#define SC_MULT3_0X     0x8000 // XTALI x 3:0
#define SC_MULT3_5X     0xa000 // XTALI x 3:5
#define SC_MULT4_0X     0xc000 // XTALI x 4:0
#define SC_MULT4_5X     0xe000 // XTALI x 4:5

#define SC_ADD0         0x0000 // No modification is allowed
#define SC_ADD0_5       0x0800 // 0.5x
#define SC_ADD1_0       0x1000 // 1.0x
#define SC_ADD1_5       0x1800 // 1.5x

void sendMIDI(uint8_t data);

void talkMIDI(uint8_t cmd, uint8_t data1, uint8_t data2);

void initialiseVS10xx();

// This will read key status and mode registers from the VS10xx device
// and dump them to the serial port.
//
pio_spi_inst_t spi = {
    .pio = pio1,
    .sm = 0,
    .cs_pin = VS_XCS
};

void VSWriteRegister(uint8_t address, uint8_t highbyte, uint8_t lowbyte);
void VSWriteRegister16 (const uint8_t address, uint16_t value);
uint16_t VSReadRegister(uint8_t address);

void VSStatus();
int bpm = 72;  // beats per minute
// duration of a beat in ms
float beatDuration = 60.0 / bpm * 1000;

// the melody sequence:
int melody[] = {64, 66, 71, 73, 74, 66, 64, 73, 71, 66, 74, 73};
// which note of the melody to play:
int noteCounter = 0;
//Send a MIDI note-on message.  Like pressing a piano key
//channel ranges from 0-15
void noteOn(uint8_t channel, uint8_t note, uint8_t attack_velocity) {
    talkMIDI( (0x90 | channel), note, attack_velocity);
}

//Send a MIDI note-off message.  Like releasing a piano key
void noteOff(uint8_t channel, uint8_t note, uint8_t release_velocity) {
    talkMIDI( (0x80 | channel), note, release_velocity);
}
int main() {
    // Initialize stdio and SPI for VS10xx communication
    stdio_init_all();

    // Configure VS10xx
    initialiseVS10xx();
    talkMIDI(0xB0, 0x07, 120); //0xB0 is channel message, set channel volume to near max (127)
    // Main loop for reading MIDI data (to be implemented based on MIDI source)

    // talkMIDI(0xB0, 0, 0x00); //Default bank GM1

    while (1) {
        //Change to different instrument
    	for(int instrument = 0 ; instrument < 1 ; instrument++) {
    		for (int bank=0; bank<2; ++bank) {
    			talkMIDI(0xB0, 0, bank ? 0x79 : 0);

    			talkMIDI(0xC0, instrument, 0);
    			noteOn(0, 60, 127);
    			noteOn(0, 63, 127);
    			noteOn(0, 67, 127);
    			sleep_ms(2000);

    			//Turn off the note with a given off/release velocity
    			noteOff(0, 60, 127);
    			noteOff(0, 63, 127);
    			noteOff(0, 67, 127);
    			sleep_ms(100);
    		}
    	}
    }
}

void sendMIDI(uint8_t data) {
    pio_spi_write8_blocking(&spi, &data, 1);
}

void talkMIDI(uint8_t cmd, uint8_t data1, uint8_t data2) {
    printf("Sending MIDI command 0x%02X\n", cmd);
    while (!gpio_get(VS_DREQ)); // Wait for DREQ signal to go high
    gpio_put(VS_XDCS, 0); // Select Data Chip

    sendMIDI(cmd);
    sendMIDI(data1);
    if ((cmd & 0xF0) <= 0xB0 || (cmd & 0xF0) >= 0xE0) {
        sendMIDI(data2);
    }

    gpio_put(VS_XDCS, 1); // Deselect Data Chip
}

void checkVoices();
static int midi_lengths[8] = {3, 3, 3, 3, 2, 2, 3, 1};

void LoadUserCode();
static uint8_t midi_sysex_data[4096 + 2];
void initialiseVS10xx() {
    printf("RESET \n\n\n\n\n\n");
    gpio_init(PICO_DEFAULT_LED_PIN);
    gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

    // Set up GPIO pins
    gpio_init(VS_XCS);
    gpio_init(VS_XDCS);
    gpio_init(VS_DREQ);
    gpio_init(VS_RESET);

    gpio_set_dir(VS_DREQ, GPIO_IN);
    gpio_set_dir(VS_XCS, GPIO_OUT);
    gpio_set_dir(VS_XDCS, GPIO_OUT);
    gpio_set_dir(VS_RESET, GPIO_OUT);

    gpio_put(VS_XCS, 1);
    gpio_put(VS_XDCS, 1);
    gpio_put(VS_RESET, 0);


    uint offset = pio_add_program(spi.pio, &spi_cpha0_program);
    pio_spi_init(spi.pio, spi.sm, offset,
                 8, // 8 bits per SPI frame
                 31.25f, // 1 MHz @ 125 clk_sys
                 false, // CPHA = 0
                 false, // CPOL = 0
                 VS_SCK,
                 VS_MOSI,
                 VS_MISO
    );
    // uint8_t data = 0xff;
    // pio_spi_write8_blocking(&spi, &data, 1);

    sleep_ms(1);
    gpio_put(VS_RESET, 1);

    VSReadRegister(SCI_MODE);

    // Perform software reset and initialise VS mode
    VSWriteRegister16(SCI_MODE, SM_SDINEW|SM_RESET);
    sleep_ms(200);

    VSStatus();
    printf("Loading MIDI Code\n");
    for (int i = 0; i < CODE_SIZE; i++) {
        VSWriteRegister16(atab[i], dtab[i]);
    }
	VSWriteRegister16(SCI_AIADDR, 0x50);
    printf("Done Loading MIDI Code\n");
    VSStatus();
    static int midi_pos, midi_len;
    static uint32_t midi_command;
    static int midi_insysex;
    uint8_t midi_data[3] = { 0 };
    while (1) {
        int value = getchar_timeout_us(500);

        if (PICO_ERROR_TIMEOUT != value) {
            if (value & 0x80 && !(value == 0xF7 && midi_insysex)) {
                midi_pos = 0;
                midi_len = midi_lengths[value >> 4 & 7];
                midi_command = 0;

                if (value == 0xF0) midi_insysex = 1;
            }
            if (midi_insysex) {
                midi_sysex_data[midi_pos++] = value;

                if (value == 0xF7 || midi_pos >= sizeof(midi_sysex_data)) {
                    //midi_send_sysex();
                }

                // return;
            } else if (midi_len) {
                // midi_command |= value << midi_pos * 8;

                midi_data[midi_pos] = value;
                if (++midi_pos == midi_len) {
                    // midiOutShortMsg(midi_out_device, midi_command);
                    talkMIDI(midi_data[0], midi_data[1], midi_data[2]);
                    midi_data[0] = 0;
                    midi_data[1] = 0;
                    midi_data[2] = 0;
                } else {

                }
            }
        }
    }
}

// Read a VS10xx register using the SCI (SPI command) bus.
//
uint16_t VSReadRegister(uint8_t address) {
    uint8_t cmd[2] = {0x03, address};
    uint8_t result[2] = {0, 0};
    while (!gpio_get(VS_DREQ)); //Wait for DREQ to go high indicating IC is available
    gpio_put(VS_XCS, 0); //Select control
    pio_spi_write8_blocking(&spi, cmd, 2);
    pio_spi_read8_blocking(&spi, result, 2);
    while (!gpio_get(VS_DREQ));
    gpio_put(VS_XCS, 1); // Deselect Control Chip

    return result[0] << 8 | result[1];
}

void VSWriteRegister(const uint8_t address, uint8_t highbyte, uint8_t lowbyte) {
    uint8_t cmd[4] = {0x02, address, highbyte, lowbyte};
    while (!gpio_get(VS_DREQ)); //Wait for DREQ to go high indicating IC is available
    gpio_put(VS_XCS, 0); // Select Control Chip
    pio_spi_write8_blocking(&spi, cmd, 4);
    while (!gpio_get(VS_DREQ));
    gpio_put(VS_XCS, 1); // Deselect Control Chip
}

void VSWriteRegister16 (const uint8_t address, uint16_t value) {
    VSWriteRegister (address, value>>8, value&0xFF);
}
#define SS_SWING_BITS     3
#define SS_SWING_MASK     0x7000
#define SS_VER_BITS       4
#define SS_VER_MASK       0x00f0
#define SS_AVOL_BITS      2
#define SS_AVOL_MASK      0x0003

#define SS_VER_VS1001 0x00
#define SS_VER_VS1011 0x10
#define SS_VER_VS1002 0x20
#define SS_VER_VS1003 0x30
#define SS_VER_VS1053 0x40
#define SS_VER_VS8053 0x40
#define SS_VER_VS1033 0x50
#define SS_VER_VS1063 0x60
#define SS_VER_VS1103 0x70
#define TEST

void VSStatus(void) {
#ifdef TEST
    // Print out some of the VS10xx registers
    uint16_t vsreg = VSReadRegister(SCI_MODE); // MODE Mode Register
    printf("Mode=0x%04x b\n", vsreg);
    vsreg = VSReadRegister(SCI_STATUS);
    printf("Stat=0x%04x b\n", vsreg);
    switch (vsreg & SS_VER_MASK) {
        case SS_VER_VS1001: printf(" (VS1001)\n");
            break;
        case SS_VER_VS1011: printf(" (VS1011)\n");
            break;
        case SS_VER_VS1002: printf(" (VS1002)\n");
            break;
        case SS_VER_VS1003: printf(" (VS1003)\n");
            break;
        case SS_VER_VS1053: printf(" (VS1053)\n");
            break;
        case SS_VER_VS1033: printf(" (VS1033)\n");
            break;
        case SS_VER_VS1063: printf(" (VS1063)\n");
            break;
        case SS_VER_VS1103: printf(" (VS1103)\n");
            break;
        default: printf(" (Unknown)\n");
            break;
    }
    vsreg = VSReadRegister(SCI_VOL); // VOL Volume
    printf("Vol =0x%04x\n", vsreg);
    vsreg = VSReadRegister(SCI_AUDATA); // AUDATA Misc Audio data
    printf("AUDA=0x%04x (%uHz)\n", vsreg, (vsreg & 0xFFFE));
#endif
}
#ifdef TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// A set of test functions that can be used to probe the voices
// used on less capable modules where voices are mapped over to GM voice sets.
//
// Can be ignored for most practical purposes!
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// voice is 1 to 128
void testVoice (int voice) {
    talkMIDI(0xC0, voice-1, 0);
    talkMIDI (0x90, 60, 127);
    sleep_ms(200);
    talkMIDI (0x90, 64, 127);
    sleep_ms(200);
    talkMIDI (0x90, 67, 127);
    sleep_ms(200);
    talkMIDI (0x80, 60, 0);
    talkMIDI (0x80, 64, 0);
    talkMIDI (0x80, 67, 0);
    sleep_ms(200);
}
void checkVoices () {
    // Voices to check - range 1 to 128
    for (int i=120; i<129; i++) {
        printf("Voice: %i\n",i);
        testVoice(i);
    }  
}

void probeVoice (int voice) {
    int ins[]  = {  1,  9, 17, 25, 30, 33, 41, 49, 57, 65, 73, 81, 89,113}; // 1 to 128; change to 0 to 127 in msg
    char vce[] = {'P','V','O','G','g','B','v','S','T','x','F','L','d','s'};
    printf("Probing voice: %i", voice);
    for (int i=0; i<(sizeof(ins)/sizeof(ins[0])); i++) {
        printf("Voice: ins %i ", ins[i]);
        printf("vce %i", vce[i]);
        testVoice(ins[i]);
        testVoice(voice);
    }
    printf("\n");
}


#endif


/* User application code loading tables for VS10xx */
#if 0

#endif

#ifndef SKIP_PLUGIN_VARNAME
const unsigned short plugin[] = { /* Compressed plugin */
#endif
	0x0007,0x0001, /*copy 1*/
	0x8030,
	0x0006,0x01ee, /*copy 494*/
	0x2800,0x38c0,0x0006,0x2016,0x3613,0x0024,0x0006,0x0057,
	0x3e15,0x1c15,0x0020,0x1fd4,0x3580,0x3802,0xf204,0x3804,
	0x0fff,0xfe44,0xa244,0x1804,0xf400,0x4094,0x2800,0x0f85,
	0x3009,0x1bc2,0xf400,0x4500,0x2000,0x0000,0x36f5,0x3c15,
	0x3009,0x3857,0x0030,0x0a57,0x3e14,0xf806,0x3701,0x8024,
	0x0006,0x0017,0x3e04,0x9c13,0x0020,0x1fd2,0x3b81,0x8024,
	0x36f4,0xbc13,0x36f4,0xd806,0x0030,0x0717,0x2100,0x0000,
	0x3f05,0xdbd7,0x3613,0x0024,0x3e22,0xb815,0x3e05,0xb814,
	0x3615,0x0024,0x3405,0x9014,0x36e3,0x0024,0x2000,0x0000,
	0x36f2,0x9815,0x3613,0x0024,0x3e22,0xb815,0x3e05,0xb814,
	0x3615,0x0024,0x3405,0x9014,0x36e3,0x0024,0x2000,0x0000,
	0x36f2,0x9815,0x3613,0x0024,0x3e12,0xb817,0x3e12,0x3815,
	0x3e05,0xb814,0x3615,0x0024,0x0000,0x800a,0x3e10,0x3801,
	0x3e10,0xb804,0x3e01,0x7810,0x0030,0x00d0,0x2900,0x0400,
	0x3001,0x0024,0x4080,0x03cc,0x3000,0x0024,0x2800,0x36c5,
	0x4090,0x0024,0x0000,0x0024,0x2800,0x2485,0x0000,0x0024,
	0x0000,0x0081,0x3000,0x0024,0x6012,0x0024,0x0000,0x0401,
	0x2800,0x3305,0x0000,0x0024,0x6012,0x0024,0x0000,0x0024,
	0x2800,0x2885,0x0000,0x0024,0x2900,0x0c80,0x0000,0x0024,
	0x4088,0x008c,0x0000,0x2000,0x6400,0x0024,0x0000,0x3c00,
	0x2800,0x2118,0x0000,0x0024,0x2800,0x2540,0x3801,0x0024,
	0x6400,0x038c,0x0000,0x0024,0x2800,0x2558,0x0000,0x0024,
	0x3013,0x0024,0x2900,0x0400,0x3801,0x0024,0x4080,0x0024,
	0x0000,0x0024,0x2800,0x2495,0x0000,0x0024,0x6890,0x03cc,
	0x2800,0x36c0,0x3800,0x0024,0x2900,0x0c80,0x0030,0x0110,
	0x3800,0x0024,0x0000,0x3c00,0x6400,0x0024,0x003f,0xff00,
	0x2800,0x2d48,0x0000,0x0024,0x0000,0x3fc0,0x6400,0x0024,
	0x0000,0x3c00,0x2800,0x3605,0x6400,0x0024,0x0000,0x0024,
	0x2800,0x3615,0x0000,0x0024,0xb880,0x184c,0x2900,0x0400,
	0x3009,0x3800,0x4082,0x9bc0,0x6014,0x0024,0x0000,0x3c04,
	0x2800,0x2b81,0x0000,0x3dc1,0x2900,0x0c80,0x0000,0x0024,
	0xf400,0x4004,0x0000,0x3dc1,0x6412,0x0024,0x0030,0x0090,
	0x2800,0x2cc5,0x0000,0x0000,0x0000,0x0400,0x2800,0x36c0,
	0x3800,0x0024,0x0030,0x00d0,0x3001,0x4024,0xa50a,0x0024,
	0x0000,0x03c0,0xb50a,0x0024,0x0000,0x0300,0x6500,0x0024,
	0x0000,0x0024,0x2900,0x0408,0x0000,0x3188,0x0000,0x0380,
	0x6500,0x0024,0x0000,0x0024,0x2800,0x33d5,0x0000,0x0024,
	0x2900,0x0400,0x0000,0x0024,0x4080,0x03cc,0x0000,0x0080,
	0x2800,0x3315,0x0000,0x0024,0x2800,0x36c0,0x3800,0x0024,
	0x2900,0x0c80,0x0000,0x0024,0x408a,0x0024,0x0030,0x0110,
	0x3613,0x0024,0x3e11,0x4024,0x30f0,0x0024,0x3e10,0x0024,
	0x3000,0x4024,0x2926,0xa140,0x3e00,0x4024,0x36d3,0x0024,
	0x0000,0x0000,0x0030,0x0090,0x3800,0x0024,0x36f1,0x5810,
	0x36f0,0x9804,0x36f0,0x1801,0x3405,0x9014,0x36f3,0x0024,
	0x36f2,0x1815,0x2000,0x0000,0x36f2,0x9817,0x002b,0x1105,
	0x0030,0x00d2,0x0030,0x0690,0x0030,0x0291,0x0000,0x0084,
	0x0006,0x6853,0x3e05,0xb814,0x3635,0x0024,0x0000,0x800a,
	0xb880,0x0024,0x3800,0x0024,0x3910,0x0024,0x0000,0xc0c0,
	0x3900,0x0024,0x0006,0x0051,0x0030,0x0000,0x2910,0x3740,
	0x3a00,0x0024,0xb880,0x010c,0x38e0,0x184c,0x3800,0x0024,
	0x3800,0x0024,0x0000,0x0f00,0x0006,0x0010,0x3009,0x2c00,
	0x0003,0x1e40,0x3009,0x2410,0x0006,0x0011,0x3009,0x2410,
	0x0030,0x0ad0,0x3800,0x0024,0x0000,0x09c0,0x0030,0x0690,
	0x2910,0x7780,0x3800,0x0024,0x0001,0x0010,0xb882,0x0024,
	0x291d,0x5800,0x0002,0xdc00,0x001f,0xff00,0x0003,0xda90,
	0x2926,0x1440,0x3800,0x0024,0x2926,0x0e40,0x0030,0x0490,
	0x6890,0x0024,0x3800,0x0024,0x2900,0x1740,0x0000,0x8001,
	0x2919,0x8180,0x3613,0x0024,0x6012,0x0024,0x0003,0xd950,
	0x2800,0x4498,0x0000,0x0024,0x2919,0x8180,0x3613,0x104c,
	0x2928,0xce40,0x3c00,0x0024,0x0000,0x1000,0x2900,0x0a80,
	0x34f1,0x0024,0xb882,0x0042,0x30f0,0xc024,0x4dc2,0x0024,
	0x3810,0x0024,0x2800,0x4480,0x38f0,0x4024,
	0x0007,0x0001, /*copy 1*/
	0x5800,
	0x0006, 0x8002, 0x1800, /*Rle(2)*/
	0x0007,0x0001, /*copy 1*/
	0x8010,
	0x0006,0x0016, /*copy 22*/
	0xf400,0x4095,0x0006,0x0017,0x3009,0x1c40,0x3009,0x1fc2,
	0x6020,0x0024,0x0000,0x1fc2,0x2000,0x0000,0xb020,0x4542,
	0x3009,0x3857,0x2800,0x1080,0x0030,0x0457,
	0x0007,0x0001, /*copy 1*/
	0x8025,
	0x0006,0x0002, /*copy 2*/
	0x2a00,0x100e,
	0x0007,0x0001, /*copy 1*/
	0x8022,
	0x0006,0x0002, /*copy 2*/
	0x2a00,0x060e,
#define PLUGIN_SIZE 546
#ifndef SKIP_PLUGIN_VARNAME
};
#endif
void LoadUserCode(void) {
	int i = 0;

	while (i<sizeof(plugin)/sizeof(plugin[0])) {
		unsigned short addr, n, val;
		addr = plugin[i++];
		n = plugin[i++];
		if (n & 0x8000U) { /* RLE run, replicate n samples */
			n &= 0x7FFF;
			val = plugin[i++];
			while (n--) {
				VSWriteRegister16(addr, val);
			}
		} else {           /* Copy run, copy n samples */
			while (n--) {
				val = plugin[i++];
				VSWriteRegister16(addr, val);
			}
		}
	}
}